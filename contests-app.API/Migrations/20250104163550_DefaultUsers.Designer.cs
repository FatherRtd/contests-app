// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using contests_app.API.Persistence;

#nullable disable

namespace contests_app.API.Migrations
{
    [DbContext(typeof(ContestsDbContext))]
    [Migration("20250104163550_DefaultUsers")]
    partial class DefaultUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("contests_app.API.Persistence.Entities.TeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("contests_app.API.Persistence.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMentor")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("448bb116-6a2f-4c04-9e5f-162d686f9720"),
                            Avatar = "",
                            IsAdmin = false,
                            IsMentor = true,
                            Login = "mentor",
                            Name = "Mentor",
                            PasswordHash = "$2a$11$vWUBFNEctvGRWS9DFaAU9uM98nf9rPv3QV/UcH3vP7knsrtJMwDJ6",
                            SurName = "Mentor"
                        },
                        new
                        {
                            Id = new Guid("124beadd-a131-4277-a5aa-af3506fe3b59"),
                            Avatar = "",
                            IsAdmin = true,
                            IsMentor = false,
                            Login = "admin",
                            Name = "Admin",
                            PasswordHash = "$2a$11$OGgY.r9OKM4qZgwylQEpnOQjWD4TvxgKzBLN9J8.GBb9PSbsJGNaO",
                            SurName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("ef24cd9d-1b46-4957-8d7f-5ee4492bb52e"),
                            Avatar = "",
                            IsAdmin = false,
                            IsMentor = false,
                            Login = "user",
                            Name = "User",
                            PasswordHash = "$2a$11$xuWK8EfPJjyapYJEsUo4TOCp.LitO8J9Mev4rGSlDzzJq1WcONOkG",
                            SurName = "User"
                        });
                });

            modelBuilder.Entity("contests_app.API.Persistence.Entities.TeamEntity", b =>
                {
                    b.HasOne("contests_app.API.Persistence.Entities.UserEntity", "Owner")
                        .WithOne("OwnedTeam")
                        .HasForeignKey("contests_app.API.Persistence.Entities.TeamEntity", "OwnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("contests_app.API.Persistence.Entities.UserEntity", b =>
                {
                    b.HasOne("contests_app.API.Persistence.Entities.TeamEntity", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Team");
                });

            modelBuilder.Entity("contests_app.API.Persistence.Entities.TeamEntity", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("contests_app.API.Persistence.Entities.UserEntity", b =>
                {
                    b.Navigation("OwnedTeam")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
